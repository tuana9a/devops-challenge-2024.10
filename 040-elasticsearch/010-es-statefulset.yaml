---
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: es
spec:
  serviceName: es-headless
  replicas: 3
  selector:
    matchLabels:
      app: es
  template:
    metadata:
      labels:
        app: es
    spec:
      topologySpreadConstraints:
        # spread accross zones
        - maxSkew: 1
          topologyKey: topology.kubernetes.io/zone
          whenUnsatisfiable: DoNotSchedule
          labelSelector:
            matchLabels:
              app: es
        # avoid same nodes in one zone
        - maxSkew: 1
          topologyKey: kubernetes.io/hostname
          whenUnsatisfiable: DoNotSchedule
          labelSelector:
            matchLabels:
              app: es
      affinity:
        podAntiAffinity:
          # maximum one pod per node
          requiredDuringSchedulingIgnoredDuringExecution:
            - labelSelector:
                matchExpressions:
                  - key: app
                    operator: In
                    values:
                      - es
              topologyKey: "kubernetes.io/hostname"
      volumes:
        - name: es-ca-certs
          secret:
            secretName: es-ca-certs
        - name: es-conf-template
          configMap:
            name: es-conf-template
        # - name: es-keystore
        #   persistentVolumeClaim:
        #     claimName: es-keystore
      initContainers:
        - name: increase-vm-max-map
          image: alpine
          command: ["sysctl", "-w", "vm.max_map_count=262144"]
          securityContext:
            privileged: true
        - name: increase-fd-ulimit
          image: alpine
          command: ["sh", "-c", "ulimit -n 65536"]
          securityContext:
            privileged: true
        - name: chown-workdir
          image: alpine
          command:
            - "sh"
            - "-c"
            - |
              chown 1000:1000 /workdir
              mkdir -p /workdir/data
              chown 1000:1000 /workdir/data
          volumeMounts:
            - name: es-workdir
              mountPath: /workdir
        - name: prepare-certs
          image: alpine
          env:
            - name: NODE_NAME
              valueFrom:
                fieldRef:
                  fieldPath: metadata.name
            - name: POD_NAMESPACE
              valueFrom:
                fieldRef:
                  fieldPath: metadata.namespace
          volumeMounts:
            - name: es-workdir
              mountPath: /workdir/
            - name: es-ca-certs
              mountPath: /ca-certs/
          command:
            - sh
            - -c
            - |
              set -e

              apk add openssl

              mkdir -p /workdir/certs
              cp /ca-certs/ca.crt /workdir/certs
              SVC_NAME=es
              HEADLESS_SVC_NAME=es-headless

              org_name=tuana9a
              country=VN
              state=HN
              ca_key=/ca-certs/ca.key
              ca_crt=/workdir/certs/ca.crt
              expire_days=${expire_days:-3650}
              server_key=/workdir/certs/server.key
              server_csr=/workdir/certs/server.csr
              server_crt=/workdir/certs/server.crt

              # $pod-name.$headless-service-name.$namespace.svc.cluster.local
              SAN="DNS:$SVC_NAME.$POD_NAMESPACE.svc.cluster.local"
              SAN="$SAN,DNS:$NODE_NAME.$HEADLESS_SVC_NAME.$POD_NAMESPACE.svc.cluster.local"

              openssl genrsa -out $server_key 2048
              openssl req -new -sha256 -subj "/C=$country/ST=$state/O=$org_name/CN=$org_name" -key $server_key -out $server_csr
              openssl x509 -req -sha256 -days $expire_days -in $server_csr -CA $ca_crt -CAkey $ca_key -out $server_crt -extfile <(printf "subjectAltName=$SAN") -CAcreateserial

              chown 1000:1000 -R /workdir/certs

              ls -l /workdir/certs
        - name: set-node-name
          image: alpine
          env:
            - name: NODE_NAME
              valueFrom:
                fieldRef:
                  fieldPath: metadata.name
            - name: POD_NAMESPACE
              valueFrom:
                fieldRef:
                  fieldPath: metadata.namespace
          volumeMounts:
            - name: es-conf-template
              mountPath: /templates/es-conf-template.yaml
              subPath: es-conf-template.yaml
            - name: es-workdir
              mountPath: /workdir/
          command:
            - sh
            - -c
            - |
              HEADLESS_SVC_NAME=es-headless
              sed "s|{NODE_NAME}|$NODE_NAME.$HEADLESS_SVC_NAME.$POD_NAMESPACE.svc.cluster.local|" /templates/es-conf-template.yaml > /workdir/elasticsearch.yml
      containers:
        - name: elasticsearch
          image: elasticsearch:8.15.3
          resources:
            limits:
              cpu: 1000m
              memory: 2500Mi
            requests:
              cpu: 250m
              memory: 2000Mi
          ports:
            - containerPort: 9200
              name: rest
              protocol: TCP
          volumeMounts:
            - name: es-workdir
              mountPath: /usr/share/elasticsearch/config/elasticsearch.yml
              subPath: elasticsearch.yml
            - name: es-workdir
              mountPath: /usr/share/elasticsearch/config/certificates/
              subPath: certs
            - name: es-workdir
              mountPath: /usr/share/elasticsearch/data
              subPath: data
          env:
            - name: ELASTIC_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: es-bootstrap-password
                  key: password
            # - name: ES_JAVA_OPTS
            #   value: "-Xms512m -Xmx1024m"
  volumeClaimTemplates:
    - metadata:
        name: es-workdir
      spec:
        accessModes: ["ReadWriteOnce"]
        storageClassName: "standard-rwo"
        resources:
          requests:
            storage: 5Gi
---
kind: Service
apiVersion: v1
metadata:
  name: es-headless # WARN: changing the svc name will break the ssl certs, so update value the HEADLESS_SVC_NAME env at init containers above!
spec:
  type: ClusterIP
  clusterIP: None
  selector:
    app: es
  ports:
    - port: 9200
---
kind: Service
apiVersion: v1
metadata:
  name: es
spec:
  type: ClusterIP
  selector:
    app: es
  ports:
    - port: 9200
